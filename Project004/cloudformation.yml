#----------------------------------------------------------------------
Description:
  One VPC with
  - 4 subnets (all public, each in one AZ);
  - 1 route table (for public subnets);
  - 1 internet gateway (route in public route table);
  - 1 NACL (for public traffic, swarm ports configured);
  - 1 security group for ec2 instances;
  - 4 EC2 instances (all public, each in one subnet), docker/docker-compose installed;
  * By default VPC also deploys 1 NetworkACL and 1 SecurityGroup not reachable for changes by CloudFormation

#----------------------------------------------------------------------
#Metadata to define presentation of input parameters (AWS console interface)
#----------------------------------------------------------------------
Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Configuration"
        Parameters:
          - EnvironmentName
          - EnvType
      - Label:
          default: "Network Configuration"
        Parameters: 
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PublicSubnet4CIDR
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - KeyPairName        
          - Ip4ServerConnection
    ParameterLabels:
      EnvironmentName:
        default: Environment Name
      EnvType:
        default: Environment Type
      VpcCIDR: 
        default: VPC IP range
      PublicSubnet1CIDR:
        default: First Public Subnet VPC IP range
      PublicSubnet2CIDR:
        default: Second Public Subnet VPC IP range
      PublicSubnet3CIDR:
        default: Third Public Subnet VPC IP range
      PublicSubnet4CIDR:
        default: Fourth Public Subnet VPC IP range
      Ip4ServerConnection:
        default: IP address (or range) for connection to public servers
      KeyPairName:
        default: KeyPair for EC2 instances

#----------------------------------------------------------------------
#Input parameters for user to fullfil
#----------------------------------------------------------------------
Parameters:

  EnvironmentName:
    Description: Enter an environment name to be prefixed to tag 'Name' of resources
    Type: String
    AllowedPattern: ^\S+$
    ConstraintDescription: cannot have spaces neither be empty

  EnvType: 
    Description: Choose environment type
    Type: String
    AllowedValues: 
      - Production
      - Maintenance
    Default: Maintenance      
    ConstraintDescription: must specify one of the options
    
  VpcCIDR:
    Description: Enter the IP range (CIDR notation) for VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(\/[0-9]{1,2}){1}$
    ConstraintDescription: must be a valid CIDR range

  PublicSubnet1CIDR:
    Description: Enter the IP range (CIDR notation) for the first public subnet
    Type: String
    Default: 10.0.10.0/24
    AllowedPattern: ^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(\/[0-9]{1,2}){1}$
    ConstraintDescription: must be a valid CIDR range

  PublicSubnet2CIDR:
    Description: Enter the IP range (CIDR notation) for the second public subnet
    Type: String
    Default: 10.0.11.0/24
    AllowedPattern: ^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(\/[0-9]{1,2}){1}$
    ConstraintDescription: must be a valid CIDR range

  PublicSubnet3CIDR:
    Description: Enter the IP range (CIDR notation) for the third public subnet
    Type: String
    Default: 10.0.12.0/24
    AllowedPattern: ^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(\/[0-9]{1,2}){1}$
    ConstraintDescription: must be a valid CIDR range

  PublicSubnet4CIDR:
    Description: Enter the IP range (CIDR notation) for the fourth public subnet
    Type: String
    Default: 10.0.13.0/24
    AllowedPattern: ^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(\/[0-9]{1,2}){1}$
    ConstraintDescription: must be a valid CIDR range

  Ip4ServerConnection:
    Description: Enter the IP address (or CIDR range) for connections SSH/RDP/ICMP to public servers (USED ONLY BY DEV ENVTYPE)
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: ^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(\/[0-9]{1,2}){0,1}$
    ConstraintDescription: must be an IP or CIDR range
    
  KeyPairName:
    Description: Enter keypair name for EC2 instances
    Type: String
    Default: kp_ctreinamento

#----------------------------------------------------------------------
#Conditions for resource configuration
#----------------------------------------------------------------------
Conditions:

  IsEnvMaintenance: !Equals [ !Ref EnvType, Maintenance ] #Used to turn on/off some in/outbound rules of NACLs/SecGroups (via update stack)

#----------------------------------------------------------------------
#Resources definition
#----------------------------------------------------------------------
Resources:

  # VPC #############################################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc

  # Public Subnets ------------------------------------------------------------------
  SubnetPub1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]   #Selects 1st AZ of current zone
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-subnet-pub1

  SubnetPub2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]   #Selects 2nd AZ of current zone
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-subnet-pub2

  SubnetPub3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]   #Selects 3rd AZ of current zone
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-subnet-pub3

  SubnetPub4:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 3, !GetAZs  '' ]   #Selects 4th AZ of current zone
      CidrBlock: !Ref PublicSubnet4CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-subnet-pub4

  # Internet Gateway ----------------------------------------------------------------
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Route Table --------------------------------------------------------------
  RouteTablePub:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-rtb-pub
    
  RouteTablePubRouteA:  #Internet traffic using Internet Gateway
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePub
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTablePubAssociation2SubnetPub1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePub
      - SubnetPub1
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPub1

  RouteTablePubAssociation2SubnetPub2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePub
      - SubnetPub2
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPub2

  RouteTablePubAssociation2SubnetPub3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePub
      - SubnetPub3
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPub3

  RouteTablePubAssociation2SubnetPub4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePub
      - SubnetPub4
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPub4

  # Public Network ACL --------------------------------------------------------------
  NetworkACLPub:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-nacl-pub

  NetworkACLPubInboundHTTP: #Allow external requests to internal webservers
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 100
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

  NetworkACLPubInboundHTTPS: #Allow external requests to internal webservers
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 110
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

  NetworkACLPubInboundEphemeral: #Allow external responses to requests from servers; install (apt-get); maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Condition: IsEnvMaintenance
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 120
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

  NetworkACLPubInboundSSH: #Allow external SSH requests to linux servers; maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Condition: IsEnvMaintenance
    Properties:    
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 130
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: !Ref Ip4ServerConnection
       PortRange:
         From: 22
         To: 22

  NetworkACLPubInboundICMP: #Allow external pings to servers (and responses from servers to external pings); maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Condition: IsEnvMaintenance
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 140
       Protocol: 1  #IANA code or -1 for 'All' (1=ICMP)
       Icmp:
         Code: -1
         Type: -1
       RuleAction: allow
       CidrBlock: !Ref Ip4ServerConnection

  NetworkACLPubInboundSwarmMngmnt: #Allow internal docker swarm management communication
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 150
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 2377
         To: 2377

  NetworkACLPubInboundSwarmNodesTCP: #Allow internal docker swarm nodes communication (TCP)
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 160
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 7496
         To: 7496

  NetworkACLPubInboundSwarmNodesUDP: #Allow internal docker swarm nodes communication (UDP)
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 170
       Protocol: 17  #IANA code or -1 for 'All' (17=UDP)
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 7496
         To: 7496

  NetworkACLPubInboundOverlayNtwTraffic: #Allow internal docker swarm overlay network traffic
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 180
       Protocol: 17  #IANA code or -1 for 'All' (17=UDP)
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 4789
         To: 4789

  NetworkACLPubOutboundHTTP: #Allow requests from servers to external webservers; install (apt-get); maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Condition: IsEnvMaintenance
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 100
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

  NetworkACLPubOutboundHTTPS: #Allow requests from servers to external webservers; install (apt-get); maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Condition: IsEnvMaintenance
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 110
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

  NetworkACLPubOutboundEphemeral: #Allow server responses to external requests from clients
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 120
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

  NetworkACLPubOutboundSSH: #Allow internal SSH from public to private servers (jump host); maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Condition: IsEnvMaintenance
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 130
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: !Ref Ip4ServerConnection
       PortRange:
         From: 22
         To: 22

  NetworkACLPubOutboundICMP: #Allow pings from servers (and external responses to server pings); maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Condition: IsEnvMaintenance
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 140
       Protocol: 1  #IANA code or -1 for 'All' (1=ICMP)
       Icmp:
         Code: -1
         Type: -1
       RuleAction: allow
       CidrBlock: !Ref Ip4ServerConnection

  NetworkACLPubOutboundSwarmMngmnt: #Allow internal docker swarm management communication
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 150
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 2377
         To: 2377

  NetworkACLPubOutboundSwarmNodesTCP: #Allow internal docker swarm nodes communication (TCP)
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 160
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 7496
         To: 7496

  NetworkACLPubOutboundSwarmNodesUDP: #Allow internal docker swarm nodes communication (UDP)
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 170
       Protocol: 17  #IANA code or -1 for 'All' (17=UDP)
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 7496
         To: 7496

  NetworkACLPubOutboundSwarmOverlayNtw: #Allow internal docker swarm overlay network traffic
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 180
       Protocol: 17  #IANA code or -1 for 'All' (17=UDP)
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 4789
         To: 4789

  NetworkACLPubAssociation2SubnetPub1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - NetworkACLPub
      - SubnetPub1
    Properties: 
      NetworkAclId: !Ref NetworkACLPub
      SubnetId: !Ref SubnetPub1

  NetworkACLPubAssociation2SubnetPub2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - NetworkACLPub
      - SubnetPub2
    Properties: 
      NetworkAclId: !Ref NetworkACLPub
      SubnetId: !Ref SubnetPub2

  NetworkACLPubAssociation2SubnetPub3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - NetworkACLPub
      - SubnetPub3
    Properties: 
      NetworkAclId: !Ref NetworkACLPub
      SubnetId: !Ref SubnetPub3

  NetworkACLPubAssociation2SubnetPub4:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - NetworkACLPub
      - SubnetPub4
    Properties: 
      NetworkAclId: !Ref NetworkACLPub
      SubnetId: !Ref SubnetPub4

  # Security Group 4 public servers -------------------------------------------------
  SecGroup4PubServers:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: "public-servers-sg"
      GroupDescription: "Security group for public servers"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-sg-pubservers

  SecGroup4PubServersInboundHTTP: #Allow external requests to internal webservers
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for HTTP"
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  SecGroup4PubServersInboundHTTPS: #Allow external requests to internal webservers
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for HTTPS"
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  SecGroup4PubServersInboundSSH: #Allow external SSH requests to linux servers; maintenance
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecGroup4PubServers
    Condition: IsEnvMaintenance
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for SSH"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref Ip4ServerConnection
      
  SecGroup4PubServersInboundICMP: #Allow external pings to servers (and responses from servers to external pings); maintenance
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecGroup4PubServers
    Condition: IsEnvMaintenance
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for ICMP"
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: !Ref Ip4ServerConnection
  
  SecGroup4PubServersInboundTCPAllTraffic: #Allow "inside group" full tcp communication (including swarm nodes communication tcp port)
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for inside-group full tcp communication"
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt SecGroup4PubServers.GroupId

  # SecGroup4PubServersInboundSwarmNodesTCP: #Allow "inside group" docker swarm nodes communication (TCP)
    # Type: AWS::EC2::SecurityGroupIngress
    # DependsOn: SecGroup4PubServers
    # Properties:
      # GroupId: !Ref SecGroup4PubServers
      # Description: "Inbound for Swarm Nodes Communication"
      # IpProtocol: tcp
      # FromPort: 7496
      # ToPort: 7496
      # SourceSecurityGroupId: !GetAtt SecGroup4PubServers.GroupId

  SecGroup4PubServersInboundSwarmNodesUDP: #Allow "inside group" docker swarm nodes communication (UDP)
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for Swarm Nodes Communication"
      IpProtocol: udp
      FromPort: 7496
      ToPort: 7496
      SourceSecurityGroupId: !GetAtt SecGroup4PubServers.GroupId

  SecGroup4PubServersInboundSwarmOverlayNtw: #Allow "inside group" docker swarm overlay network traffic
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for Swarm Network Overlay traffic"
      IpProtocol: udp
      FromPort: 4789
      ToPort: 4789
      SourceSecurityGroupId: !GetAtt SecGroup4PubServers.GroupId
      
  SecGroup4PubServersInboundSwarmVislzr: #Allow external swarm visualizer access
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for Swarm Visualizer"
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      CidrIp: 0.0.0.0/0

  SecGroup4PubServersInboundSwarmAppDemo1: #Allow external swarm access to application demo
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for Swarm Demo Application"
      IpProtocol: tcp
      FromPort: 5000
      ToPort: 5000
      CidrIp: 0.0.0.0/0

  SecGroup4PubServersInboundSwarmAppDemo2: #Allow external swarm access to application demo
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for Swarm Demo Application"
      IpProtocol: tcp
      FromPort: 5001
      ToPort: 5001
      CidrIp: 0.0.0.0/0

  ###################################################################################
  
  # EC2 #############################################################################
  
  # Public instances ----------------------------------------------------------------
  EC2Pub1:
    Type: AWS::EC2::Instance
    DependsOn:
      - SecGroup4PubServers
      - NetworkACLPub
    Properties:
      ImageId: ami-0885b1f6bd170450c #Ubuntu Server 20.04 64bit-x86
      InstanceType: t2.micro
      SubnetId: !Ref SubnetPub1
      SecurityGroupIds:
        - !GetAtt SecGroup4PubServers.GroupId
      KeyName: !Ref KeyPairName
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-swarmManager1
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           sudo apt-get update -y
           #
           # Install Docker
           curl -fsSL https://get.docker.com -o get-docker.sh
           sh get-docker.sh
           usermod -aG docker ubuntu
           #
           # Install Docker-Compose
           curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
           chmod +x /usr/local/bin/docker-compose

  EC2Pub2:
    Type: AWS::EC2::Instance
    DependsOn:
      - SecGroup4PubServers
      - NetworkACLPub
    Properties:
      ImageId: ami-0885b1f6bd170450c #Ubuntu Server 20.04 64bit-x86
      InstanceType: t2.micro
      SubnetId: !Ref SubnetPub2
      SecurityGroupIds:
        - !GetAtt SecGroup4PubServers.GroupId
      KeyName: !Ref KeyPairName
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-swarmManager2
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           sudo apt-get update -y
           #
           # Install Docker
           curl -fsSL https://get.docker.com -o get-docker.sh
           sh get-docker.sh
           usermod -aG docker ubuntu
           #
           # Install Docker-Compose
           curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
           chmod +x /usr/local/bin/docker-compose

  EC2Pub3:
    Type: AWS::EC2::Instance
    DependsOn:
      - SecGroup4PubServers
      - NetworkACLPub
    Properties:
      ImageId: ami-0885b1f6bd170450c #Ubuntu Server 20.04 64bit-x86
      InstanceType: t2.micro
      SubnetId: !Ref SubnetPub3
      SecurityGroupIds:
        - !GetAtt SecGroup4PubServers.GroupId
      KeyName: !Ref KeyPairName
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-swarmWorker1
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           sudo apt-get update -y
           #
           # Install Docker
           curl -fsSL https://get.docker.com -o get-docker.sh
           sh get-docker.sh
           usermod -aG docker ubuntu
           #
           # Install Docker-Compose
           curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
           chmod +x /usr/local/bin/docker-compose

  EC2Pub4:
    Type: AWS::EC2::Instance
    DependsOn:
      - SecGroup4PubServers
      - NetworkACLPub
    Properties:
      ImageId: ami-0885b1f6bd170450c #Ubuntu Server 20.04 64bit-x86
      InstanceType: t2.micro
      SubnetId: !Ref SubnetPub4
      SecurityGroupIds:
        - !GetAtt SecGroup4PubServers.GroupId
      KeyName: !Ref KeyPairName
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-swarmWorker2
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           sudo apt-get update -y
           #
           # Install Docker
           curl -fsSL https://get.docker.com -o get-docker.sh
           sh get-docker.sh
           usermod -aG docker ubuntu
           #
           # Install Docker-Compose
           curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
           chmod +x /usr/local/bin/docker-compose

  ###################################################################################
  
#----------------------------------------------------------------------
#Output information for user after stack creation
#----------------------------------------------------------------------
Outputs:
  EnvironmentType:
    Description: Type of environment of stack
    Value: !Ref EnvType

  VPC:
    Description: ID of the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: List of the public subnets
    Value: !Join [ ",", [ !Ref SubnetPub1, !Ref SubnetPub2, !Ref SubnetPub3, !Ref SubnetPub4 ]]

  PublicSubnet1:
    Description: ID of the first public subnet
    Value: !Ref SubnetPub1

  PublicSubnet2:
    Description: ID of the second public subnet
    Value: !Ref SubnetPub2

  PublicSubnet3:
    Description: ID of the third public subnet
    Value: !Ref SubnetPub3

  PublicSubnet4:
    Description: ID of the fourth public subnet
    Value: !Ref SubnetPub4

  PublicEC2:
    Description: List of the public ec2
    Value: !Join [ ",", [ !Ref EC2Pub1, !Ref EC2Pub2, !Ref EC2Pub3, !Ref EC2Pub4 ]]

  SecGroups:
    Description: Id of security groups
    Value: !Join [ ",", [ !GetAtt SecGroup4PubServers.GroupId ]]