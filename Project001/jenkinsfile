
//ATTENTION!
//If a container is running from DOCKER_REGISTRY_REPOANDIMG:latest before build, it will be affected by the step removing containers! Build will also fail!

pipeline {
    agent any

	environment { 
        DOCKER_REGISTRY_REPOANDIMG = "$DockerRegistryRepoAndImg"
        DOCKER_REGISTRY_CREDENTIAL = 'DockerhubUsrTokenCredential'
        DOCKER_IMAGE = ''
		GITHUB_REPO = "$GitHubRepoURL"
		GITHUB_CREDENTIAL = 'GithubSSHCredential'
		TO_MAIL = "$ToMail"
    }	

    stages {
        stage('Cloning github repository...') {
            steps {
			    println("Using $GITHUB_CREDENTIAL")

				//Full checkout of GITHUB_REPO, for when this demo project is the root content of repo in GitHub
				//git url: GITHUB_REPO, credentialsId: GITHUB_CREDENTIAL
				
				//Sparse-checkout from GITHUB_REPO/Project001; whenever Project001's content is used, define dir
				checkout(
					[$class: 'GitSCM', 
					 //branches: [[name: '*/master']],
					 doGenerateSubmoduleConfigurations: false,
					 extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[$class:'SparseCheckoutPath', path:'Project001/']]]],
					 submoduleCfg: [],
					 userRemoteConfigs: [[credentialsId: GITHUB_CREDENTIAL, url: GITHUB_REPO]]
					]
				)
            }
        }
    	
        stage('Building dockerfile from repo...') {
            steps {
				script {
					DOCKER_IMAGE = docker.build(DOCKER_REGISTRY_REPOANDIMG, "./Project001")
				}
			}
		}

		stage('Testing built image...') {
			steps {
				script {
					docker.image("$DOCKER_REGISTRY_REPOANDIMG").withRun('-d=true -p 80:80') {
						//nothing; if OK, will start/stop/rm container with no errors
					}
				}
			}
		}

        stage('Uploading built image to DockerHub...') {
            steps {
				script {
					//assuming DockerHub; for custom registry, define it in first parameter
					docker.withRegistry('', DOCKER_REGISTRY_CREDENTIAL) {
						DOCKER_IMAGE.push("$BUILD_NUMBER") //pushing image with tag BUILD_NUMBER
						DOCKER_IMAGE.push('latest') //also with tag latest
					}
				}
			}
		}

        stage('Removing local images generated...') {
            steps {
				script {
					sh "docker images"
					//The ones generated by build
					sh "docker rmi $DOCKER_REGISTRY_REPOANDIMG:$BUILD_NUMBER"
					sh "docker rmi -f $DOCKER_REGISTRY_REPOANDIMG:latest"
					//Dangling images, if existent
					def shOutput = sh(returnStdout: true, script: "docker images $DOCKER_REGISTRY_REPOANDIMG --filter dangling=true")
					if (shOutput.contains("$DOCKER_REGISTRY_REPOANDIMG")) {
						sh "docker rmi -f \$(docker images -q $DOCKER_REGISTRY_REPOANDIMG --filter dangling=true)"
					}
				}
			}
		}
    }
	
	post {
		success {
			emailext body: 'Jenkins/GitHub/Docker $DEFAULT_CONTENT', subject: 'WEEEE! $DEFAULT_SUBJECT', to: "$TO_MAIL"
		}
		failure {
			emailext body: 'Jenkins/GitHub/Docker $DEFAULT_CONTENT', subject: 'OOOPS! $DEFAULT_SUBJECT', to: "$TO_MAIL"
			script {
				//IMPORTANT: if something fails here, it will exit without continue until the end!
				println("Failure post condition: removing local images generated, if existent...")
				def shOutput = sh(returnStdout: true, script: "docker images $DOCKER_REGISTRY_REPOANDIMG:$BUILD_NUMBER")
				if (shOutput.contains("$DOCKER_REGISTRY_REPOANDIMG")) {
					sh "docker rmi $DOCKER_REGISTRY_REPOANDIMG:$BUILD_NUMBER"
				}
				shOutput = sh(returnStdout: true, script: "docker images $DOCKER_REGISTRY_REPOANDIMG:latest")
				if (shOutput.contains("$DOCKER_REGISTRY_REPOANDIMG")) {
					sh "docker rmi -f $DOCKER_REGISTRY_REPOANDIMG:latest"
				}
				shOutput = sh(returnStdout: true, script: "docker images $DOCKER_REGISTRY_REPOANDIMG --filter dangling=true")
				if (shOutput.contains("$DOCKER_REGISTRY_REPOANDIMG")) {
					sh "docker rmi -f \$(docker images -q $DOCKER_REGISTRY_REPOANDIMG --filter dangling=true)"
				}
			}
		}
	}
}