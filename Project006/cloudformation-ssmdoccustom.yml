#----------------------------------------------------------------------
Description:
  One VPC with
  - 2 subnets (public);
  - 1 route table (for public subnets);
  - 1 internet gateway (route in public route table);
  - 1 NACL (for public traffic);
  - 1 security group for EC2 instances;
  - 1 EC2 template, CLI installed;
  - 1 IAM EC2 instance profile + role;
  - 1 security group for ELB;
  - 1 EC2 application ELB;
  - 1 EC2 Auto Scaling (lifecycle hook included);
  - 1 SSM Custom Document to run Ansible playbook;
  - 1 SSM State Manager association to custom document created;
  - 1 S3 bucket, if optional logs enabled for SSM State Manager.
  By default VPC deploys 1 NACL and 1 SecGroup not reachable for changes by CloudFormation

#----------------------------------------------------------------------
#Metadata to define presentation of input parameters (AWS console interface)
#----------------------------------------------------------------------
Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Configuration"
        Parameters:
          - EnvironmentName
          - ExtendedLogOption
      - Label:
          default: "Network Configuration"
        Parameters: 
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - KeyPairName
          - Ip4ServerConnection
    ParameterLabels:
      EnvironmentName:
        default: Environment Name
      ExtendedLogOption:
        default: Log Option for State Manager execution
      VpcCIDR: 
        default: VPC IP range
      PublicSubnet1CIDR:
        default: First Public Subnet VPC IP range
      PublicSubnet2CIDR:
        default: Second Public Subnet VPC IP range
      Ip4ServerConnection:
        default: IP address (or range) for connection to public servers
      KeyPairName:
        default: KeyPair for EC2 instances

#----------------------------------------------------------------------
#Input parameters for user to fulfill
#----------------------------------------------------------------------
Parameters:

  EnvironmentName:
    Description: Enter an environment name to be prefixed to tag 'Name' of resources (no spaces, max size 15, lowercase)
    Type: String
    Default: p006
    AllowedPattern: ^((?:[0-9a-z-])+) #^\S+$
    MaxLength: 15
    ConstraintDescription: lowercase alphanumeric and hyphens, not empty, no spaces, max 15 chars

  ExtendedLogOption:
    Description: TRUE for SSM State Manager full command output to S3; FALSE for standard truncated 2500 chars in console only
    Type: String
    AllowedValues:
      - True
      - False
    Default: False
    ConstraintDescription: must specify one of the options

  VpcCIDR:
    Description: Enter the IP range (CIDR notation) for VPC
    Type: String
    Default: 10.10.0.0/16
    AllowedPattern: ^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(\/[0-9]{1,2}){1}$
    ConstraintDescription: must be a valid CIDR range

  PublicSubnet1CIDR:
    Description: Enter the IP range (CIDR notation) for the first public subnet
    Type: String
    Default: 10.10.10.0/24
    AllowedPattern: ^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(\/[0-9]{1,2}){1}$
    ConstraintDescription: must be a valid CIDR range

  PublicSubnet2CIDR:
    Description: Enter the IP range (CIDR notation) for the second public subnet
    Type: String
    Default: 10.10.20.0/24
    AllowedPattern: ^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(\/[0-9]{1,2}){1}$
    ConstraintDescription: must be a valid CIDR range

  Ip4ServerConnection:
    Description: Enter the IP address (or CIDR range) for connections SSH/RDP/ICMP to public servers (USED ONLY BY DEV ENVTYPE)
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: ^((?:[0-9]{1,3}\.){3}[0-9]{1,3})(\/[0-9]{1,2}){0,1}$
    ConstraintDescription: must be an IP or CIDR range
    
  KeyPairName:
    Description: Enter keypair name for EC2 instances
    Type: AWS::EC2::KeyPair::KeyName

#----------------------------------------------------------------------
#Conditions for resource configuration
#----------------------------------------------------------------------
Conditions:

  IsLogEnabled: !Equals [ !Ref ExtendedLogOption, True ] #Used to decide whether S3 bucket is created or not for State Manager logging

#----------------------------------------------------------------------
#Resources definition
#----------------------------------------------------------------------
Resources:

  # VPC #############################################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc

  # Public Subnets ------------------------------------------------------------------
  SubnetPub1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]   #Selects 1st AZ of current zone
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-subnet-pub1

  SubnetPub2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]   #Selects 2nd AZ of current zone
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-subnet-pub2

  # Internet Gateway ----------------------------------------------------------------
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Route Table --------------------------------------------------------------
  RouteTablePub:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-rtb-pub
    
  RouteTablePubRouteA:  #Internet traffic using Internet Gateway
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePub
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTablePubAssociation2SubnetPub1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePub
      - SubnetPub1
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPub1

  RouteTablePubAssociation2SubnetPub2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePub
      - SubnetPub2
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPub2

  # Public Network ACL --------------------------------------------------------------
  NetworkACLPub:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-nacl-pub

  NetworkACLPubInboundHTTP: #Allow external requests to internal webservers
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 100
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

  NetworkACLPubInboundHTTPS: #Allow external requests to internal webservers
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 110
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

  NetworkACLPubInboundEphemeral: #Allow external responses to requests from servers; install (apt-get); maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 120
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

  NetworkACLPubInboundSSH: #Allow external SSH requests to linux servers; maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:    
       NetworkAclId: !Ref NetworkACLPub
       Egress: false
       RuleNumber: 130
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: !Ref Ip4ServerConnection
       PortRange:
         From: 22
         To: 22

  NetworkACLPubOutboundHTTP: #Allow requests from servers to external webservers; install (apt-get); maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 100
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

  NetworkACLPubOutboundHTTPS: #Allow requests from servers to external webservers; install (apt-get); maintenance
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 110
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

  NetworkACLPubOutboundEphemeral: #Allow server responses to external requests from clients
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkACLPub
    Properties:
       NetworkAclId: !Ref NetworkACLPub
       Egress: true
       RuleNumber: 120
       Protocol: 6  #IANA code or -1 for 'All' (6=TCP)
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

  NetworkACLPubAssociation2SubnetPub1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - NetworkACLPub
      - SubnetPub1
    Properties: 
      NetworkAclId: !Ref NetworkACLPub
      SubnetId: !Ref SubnetPub1

  # Security Group public servers ---------------------------------------------------
  SecGroup4PubServers:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: "public-servers-sg"
      GroupDescription: "Security group for public servers"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-sg-pubservers

  SecGroup4PubServersInboundHTTP: #Allow external requests to internal webservers
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for HTTP"
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  SecGroup4PubServersInboundHTTPS: #Allow external requests to internal webservers
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for HTTPS"
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  SecGroup4PubServersInboundSSH: #Allow external SSH requests to linux servers; maintenance (required by ansible)
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecGroup4PubServers
    Properties:
      GroupId: !Ref SecGroup4PubServers
      Description: "Inbound for SSH"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref Ip4ServerConnection

  # Security Group ELB -------------------------------------------------------------
  SecGroup4ELB:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: !Sub ${EnvironmentName}-elb-sg
      GroupDescription: "Security group for load balancer"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-sg-ldblncr

  SecGroup4ELBInbound80: #For listener 80
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SecGroup4ELB
    Properties:
      GroupId: !Ref SecGroup4ELB
      Description: "Inbound for HTTP"
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  ###################################################################################
  
  # EC2 #############################################################################
  # IAM Profile for instances -------------------------------------------------------
  IAMInstanceProfile4EC2:
    Type: AWS::IAM::InstanceProfile
    DependsOn: RoleIAM4EC2
    Properties:
      InstanceProfileName: !Sub ${EnvironmentName}-instance-profile
      Path: !Sub /${EnvironmentName}/instprofiles/
      Roles:
         - !Ref RoleIAM4EC2

  RoleIAM4EC2:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub Allows EC2 instances from ${EnvironmentName} to have access and to be managed by SSM
      RoleName: !Sub ${EnvironmentName}-ec2-ssm-atsclng-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: !Sub /${EnvironmentName}/instprofile/roles/ #for better organization
      ManagedPolicyArns: 
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM #SSM allowed to manage EC2 instance by ssm-agent
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-ec2-ssm-atsclng-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${EnvironmentName}-sclng-grp
                Action:
                  - "autoscaling:CompleteLifecycleAction"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-smm-atsclng-role

  # Instances Template --------------------------------------------------------------
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - IAMInstanceProfile4EC2
      - SecGroup4PubServers
    Properties: 
      LaunchTemplateName: !Sub ${EnvironmentName}-ec2-lnchtmplt
      LaunchTemplateData: 
        IamInstanceProfile:
          Name: !Ref IAMInstanceProfile4EC2
        ImageId: ami-0885b1f6bd170450c #Ubuntu Server 20.04 64bit-x86
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds: 
          - !GetAtt SecGroup4PubServers.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-ec2
        UserData:
          Fn::Base64: !Sub |
             #!/bin/bash -xe
             sudo apt update
             #
             # Install SSM-Agent (it is pre-installed; if necessary at any time, following commands will serve)
             # sudo apt install amazon-ssm-agent -y
             # sudo systemctl start amazon-ssm-agent
             # sudo systemctl enable amazon-ssm-agent
             #
             # Install CLI, later used by Ansible's playbook to signal the "complete-lifecycle-action" to AutoScaling hook
             sudo apt install awscli -y

  # Auto Scaling --------------------------------------------------------------------
  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - EC2LaunchTemplate
      - ELoadBalancerTargetGroup
      - SubnetPub1
      - SubnetPub2
      - SSMStateManagerAssociation
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-sclng-grp #always exactly same name configured inside RoleIAM4EC2 and playbook.yml
      MinSize: 0
      DesiredCapacity: 1
      MaxSize: 3
      Cooldown: 30 #amount of seconds to start a new scaling activity after the last one has finished
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      LifecycleHookSpecificationList:
        #signaling of completion is raised by final task of playbook.yml (if playbook runs OK, sends CONTINUE)
        - LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
          LifecycleHookName: !Sub ${EnvironmentName}-sclng-grp-lfhook #exactly same name configured inside playbook.yml
          DefaultResult: CONTINUE #ABANDON #result assumed if no completion signal is received from playbook inside 'HeartbeatTimeout' seconds
          HeartbeatTimeout: 420 #enough for: EC2 to start and run UserData + State Manager to execute AWS-ApplyAnsiblePlaybooks (installation/playbook)
      HealthCheckType: ELB #besides AutoScaling default EC2 status checks, it also considers ELB health checks (unhealthy when at least one fails)
      HealthCheckGracePeriod: 0 #how long before to start using ELB's health checks (it starts counting after LifecycleHook completion or timeout)
      TargetGroupARNs:
        - !Ref ELoadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref SubnetPub1
        - !Ref SubnetPub2

  # Load Balancer -------------------------------------------------------------------
  ELoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: 
      - SecGroup4ELB
      - SubnetPub1
      - SubnetPub2
    Properties: 
      IpAddressType: ipv4
      Name: !Sub ${EnvironmentName}-frntblncr
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref SecGroup4ELB
      Subnets: 
        - !Ref SubnetPub1
        - !Ref SubnetPub2
      Type: application
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-frntnd-ldblncr

  ELoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
     - VPC
    Properties: 
      Name: !Sub ${EnvironmentName}-ldblncr-tgrp
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetType: instance
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckIntervalSeconds: 8 #seconds between health checks (HealthCheckTimeoutSeconds is counted inside it)
      HealthCheckTimeoutSeconds: 4 #amount of seconds during which no response means a failed check
      UnhealthyThresholdCount: 2 #number of consecutive checks failing before a healthy target becomes unhealthy
      HealthyThresholdCount: 2 #number of consecutive checks succeeding before an unhealthy target becomes healthy
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds #amount of time (seconds) to wait before changing the state of a deregistering to unused
          Value: 30
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-ldblncr-tgtgrp

  ELoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ELoadBalancer
      - ELoadBalancerTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ELoadBalancerTargetGroup
                Weight: 1
      LoadBalancerArn: !Ref ELoadBalancer
      Port: 80
      Protocol: HTTP

  ###################################################################################

  # Systems Manager State Manager for Ansible execution #############################
  SSMStateManagerS3Logs:
    Type: AWS::S3::Bucket
    Condition: IsLogEnabled
    Properties:
      AccessControl: Private
      BucketName: !Sub ${EnvironmentName}-bucket-ssmlogs #Comment for auto-generated name
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-bucket-ssmlogs

  # Systems Manager Custom Document for Ansible -------------------------------------
  SSMDocumentCustomAnsible:
    Type: AWS::SSM::Document
    Properties: 
      Name: !Sub ${EnvironmentName}-ssmdoc-ansible
      DocumentFormat: YAML
      DocumentType: Command
      TargetType: /AWS::EC2::Instance
      Content:
        schemaVersion: "2.2"
        description: Document to run Ansible Playbook from URL
        parameters:
          playbookURL:
            description: The URL from playbook yml file (path from raw file, if from GitHub)
            type: String
          extravariables:
            description: Parameters for Ansible extra-vars option
            type: String
        mainSteps:
          - name: InstallRequirements
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - echo InstallRequirements started at `date`...
                - sudo apt update
                - sudo apt install ansible -y
                - echo InstallRequirements finished at `date`
          - name: RunAnsiblePlaybook
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 90
              runCommand:
                - echo RunAnsiblePlaybook started at `date`...
                - mkdir /tmp/demo-plbks
                - cd /tmp/demo-plbks
                - wget -O playbook.yml {{ playbookURL }}
                - ansible-playbook -i "localhost" --extra-vars "{{ extravariables }}" playbook.yml
                - rm -rf /tmp/demo-plbks
                - echo RunAnsiblePlaybook finished at `date`
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-ssmdoc-ansible

  # Systems Manager Association to custom document ----------------------------------
  SSMStateManagerAssociation:
    Type: AWS::SSM::Association
    DependsOn: SSMDocumentCustomAnsible
    Properties:
      AssociationName: !Sub ${EnvironmentName}-ssm-statemngr-ansible-assoc
      Name: !Ref SSMDocumentCustomAnsible
      WaitForSuccessTimeoutSeconds: 30 #seconds to wait for association status "success" (if it timeouts or fails, the entire stack creation fails)
      Targets:
        - Key: tag:Name
          Values:
            - !Sub ${EnvironmentName}-ec2 #exact the same as defined in EC2LaunchTemplate.TagSpecifications
      OutputLocation: # If IsLogEnabled, associates log location to S3 bucket; otherwise, don't
        S3Location:
          OutputS3BucketName: !If [ IsLogEnabled, !Ref SSMStateManagerS3Logs, !Ref AWS::NoValue ]
          OutputS3KeyPrefix: !If [ IsLogEnabled, !Sub '${EnvironmentName}-StateManager/', !Ref AWS::NoValue ]
      Parameters:
        playbookURL:
          - https://raw.githubusercontent.com/MariMendM/devops-sandbox/master/Project006/playbook.yml
        extravariables:
          - !Sub SSM=True AWSEnvironmentName=${EnvironmentName} AWSRegion=${AWS::Region}

  ###################################################################################

#----------------------------------------------------------------------
#Output information for user after stack creation
#----------------------------------------------------------------------
Outputs:
  VPC:
    Description: ID of the created VPC
    Value: !Ref VPC

  ELB:
    Description: DNS of Elastic Load Balancer
    Value: !GetAtt ELoadBalancer.DNSName
